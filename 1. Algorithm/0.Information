*****수식 관련*****
 / : 나눗셈 (ex. 7/4 == 1/75)
 // : 몫 구하기 (ex. 7//4 == 1)
 % : 나머지 구하기 (ex. 7%4 == 3)
: :전체 (ex. winner[2:] 3번째 부터 끝까지)
** : 제곱의 표현 (ex. a = 3 ** 2 -> 9)
math.pow(상수, 제곱근) : 제곱의 표현(이걸 사용하기 위해서는 import math를 시켜주어야 한다.) 상수^제곱근 (ex. math.pow(3, 2) -> 9)
math.sqrt() : sqrt


*****print 관련*****
end = '' : 아웃풋을 낼때 end의 형식에 맞춰서 결과가 나옴 (ex. print(sum, end = ', ') → 1, 3, 5, 7 이런 형식으로 나옴) 
\t : 한 줄에 Tab만큼 떨어져서 결과값이 나온다. (ex. print(data[i], end = '\t')) 
\n : 한줄 띄기
f'' : print에서 출력에 변수가 포함되어있을때 사용 (ex. print(f'1부터 20까지 홀수의 합: {sum}') ※sum은 변수※)
float() : 실수형 표현 (ex. float(2) -> 2.0)
round() : 반올림
round(실수, n) : 실수를 소숫점 n의자리까지 반올림하여 표현한다. 
:.2f : 소수점 2번째 자리까지 표현 (ex. print(f'80점 이상 95점 이하인 점수의 평균 : {avg:.2f}') )
:3  : 앞에 3칸을 잡는다(ex. print(f'{scores[i]:3}점 : {rankings[i]}등')
$s : 문자열 출력 (ex. print('%s' %S1))
%d : 정수 출력
%f : 실수 출력
.rjust(값) : 값만큼의 칸을 기본으로 잡고 오른쪽으로 들여쓰기 (ex. print(f'{g.name.rjust(6}'))
.ljust(값) : 값만큼의 칸을 기본으로 잡고 왼쪽으로 들여쓰기 (ex. print(f'{g.name.ljust(6)}'))
.isdigit() : 해당 문자열이 '숫자'로 이루어져 있는지 검사한다.
.isdecimal() : 해당 문자열이 0부터 9까지의 수로 이루어진 것인지 검사한다. 
.isnumeric() : 이 함수를 '수로 볼 수 있는 것'인 경우 True를 반환한다. 


*****조건문*****
try , except : whlie문에서 try에 실행할 코드를 넣고 except에 예외가 발생했을 때 처리하는 코드를 말한다. 
as : except의 조건을 변수로 반환한다.
          #ex. try:
          #       실행할 코드
          #except 예외 as 변수
          #       예외가 발생했을 때 처리하는 코드
          #       print(f'예외가 발생했습니다. {변수}')


*****Error (if, for, while문 등의 조건에 사용할 수 있다.)*****
IndexError : 범위를 벗어난 인덱스에 접근하여 에러가 발생했을 때
ZeroDivisionError : 숫자를 0으로 나눠서 에러가 발생했을 때



*****list활용*****
.append(값) : 괄호 안의 값을 리스트 맨 뒤에 추가한다. (ex. data = [1,2,3]   data.append(6) print(data) ->  [1,2,3,6])
.insert(넣을 위치offset, 넣고자 하는 요소) : (ex. data = ['1','2','3']   data.insert('0', '4')  --> data = ['4','1','2','3'])
.reverse() : 괄호 안의 리스트를 역으로 취한다. (ex. data.reverse() -> [3,2,1])
.inset(자리, 값) : 리스트의 '자리'번째에 '값' 넣는다. (ex. data.inset(1,10) -> [1,10,2,3])
del : 원하는 위치의 값을 지운다. (ex. del data[2] -> [1,2], del data[:] -> [])
.remove(값) : 괄호 안의 값을 없앤다. (ex. data.remove(1) -> [2,3])
.pop() : 리스트의 맨 마지막 값을 없앤다. (ex. data.pop () -> [1,2])
.extend(list2) : 리스트의 마지막에 list2의 값들을 더해준다. (ex. h = [6, 7, 8]  data.extend(h) -> [1,2,3,6,7,8])
"".join(리스트) : 매개변수로 들어온 ['a','b','c'] 이런식의 리스트를 'abc'의 문자열로 합쳐서 반환해주는 함수
'구분자'.join(리스트) : 리스트의 값과 값 사이에 '구분자'에 들어온 구분자를 넣어서 하나의 문자열로 합쳐줍니다. (ex. '_'.join(['a','b','c'])라고 하면 'a_b_c'와 같은 형태로 문자열을 만들어서 반환해줍니다. )
.split() : 공백을 기준으로 분리한다. (ex. data = [1 2 3 4]  data.split() --> ['1','2','3','4'])
.split('문자') : '문자'를 기준으로 분리한다. (ex. data = "1.2.3.4"  data.split('.') --> ['1','2','3','4'])
.Counter(list/string) : list속에서 같은것들의 갯수를 샌다. (ex. from collection import Counter  list = ['hello', 'hi', 'how', 'when', 'where', 'hello']  print(Counter(list)) --> Counter({'hello': 2, 'hi': 1, 'how': 1, 'when': 1, 'where': 1}))
max(list) : 최댓값 반환
min(list) : 최솟값 반환
.index(index) : list에서 index의 위치를 반환한다.
heapq.heapqpush(list, text or num) : 오름차순의 우선순위를 따져서 text or num을 넣는다.
heapq.heappop(list) : list의 0번째 순위의 값(우선순위가 높은 값)을 없앤다.
heapq.heapify(list) : list 내 정렬
heapq.heapreplace(list, item) : list에서 가장 작은 항목을 팝하고 반환하여, 새로운 item도 푸시한다. 
list(map('형태ex.int', list)) : list의 형태를 '형태'로 바꾸고 list형태로 반환한다. 
        

*****문자열 활용*****
string.replace("검색 문자", "치환 문자"[,치환 횟수]) : 검색 문자에 문자열에서 착을 문자를 지정하고 치환문자에  변경하고 싶은 문자를 적고 치환 횟수에 차환하고 싶은 횟수를 적는다(생략가능)
string.found('검색 문자') : 검색 문자의 위치를 반환한다.
string.insert(위치, 'string') : '위치'에 'string'을 넣는다.

.key() : #ex. member = {'ID' : 102, 'Name' : 'fofofofo', 'Address' : 'seoul'} 
         #print(member.keys())
         #---> deic_keys(['ID', 'Name', 'Address'])
         #print(list(member.keys()))
         #---> ['ID', 'Name', 'Address']
.get() : 출력하고자 하는 key가 없으면 오류가 아닌 None을 출력한다.
.values() : .key의 예시에서 102, fofofofo, seoul을 출력한다. 
.items() : 딕셔너리에 있는 키와 값들을 쌍으로 얻는다. (ex. car = {"name" : "BMW", "price" : "7000"} car.items())


*****랜덤 관련*****
random.random() : 0.0에서 1.0까지의 실수(float)를 반환한다. (0.0 <= x < 1.0)
random.uniform(a,b) : a~b사이의 실수(float)를 반환한다. (a <= x <= b)
random.randint(a,b) : a~b사이의 정수(int)를 반환한다. (a <= x <= b)
random.randrange(a, b) : a~b사이의 정수(int)를 반환한다. (a <= x < b, a를 입력하지 않는 경우 : 0 <= x < b)
random.choice(seq) : 매개변수로 seq타입(문자열, 튜플, 리스트)을 받아서 무작위로 하나를 뽑는다. 비어있는 시퀀스 타입의 객체를 넣으면 indexError가 뜬다.  
random.sample(seq or set, N) : 첫번째 매개변수로 시퀀스 데이터 타입(듀플, 문자열, range, 리스트) 또는 Set 타입을 받을 수 있다. 두번째 매개변수로는 랜덤하게 뽑을 인자의 갯수이다. 이때 뽑는 element가 겹치지 않는다. 
random.shuffle(seq) : 데이터의 순서를 무작위로 바꾸어준다. 이때 리스트 형태만 가능하다. (문자열, 튜플, range(a,b) 불가능)


*****파일 생성*****
with open("file.txt", 'w') as f:
  f.write('hello world')
 ----> sorce파일에 파일 생기고 실행하고 닫힘


*****정규식 표현법(import re)*****
re.match(pattern, string, flags) : 문자열의 처음부터 사작하여 패턴이 일치되는 것이 있는지를 확인한다. 
re.sub(정규식 표현, 대상 문자열, 치환 문자) : 정규식 문자열 치환
^ : 이 패턴으로 시작해야 함 (ex. ^abc : abc로 시작해야함)
$ : 이 패턴으로 종료되어야 함 (ex. xyz$ : xyz로 종료되어야 함)
[문자들] : 문자들 중에 하나이어야 함. 가능한 문자들의 집합을 정의함 (ex. [Pp]ython : 'Python' 혹은 'python')
[^문자들] : [문자들]의 반대로 피해야할 문자들의 집합을 정의함 (ex. [^aeiou] : 소문자 모음이 아닌 문자들)
| : 두 패턴 중 하나이어야 함(OR 기능) (ex. a|b : a또는 b이어야 함)
? : 앞 패턴이 없거나 하나이어야 함(Optional 패턴을 정의 할 때 사용) (\d? : 숫자가 하나 있거나 없어야 함)
+ : 앞 패턴이 하나 이상이어야 함 (ex. \d+ : 숫자가 하나 이상이어야 함)
* : 앞 패턴이 0개 이상이어야 함 (ex. \d* : 숫자가 없거나 하나 이상이어야 함)
패턴{n} : 앞 패턴이 n번 반복해서 나타나는 경우 (ex. \d{3} : 숫자가 3개 있어야 함)
패턴{n,m} : 앞 패턴이 최소 n번, 최대 m번 반복해서 나타나는 경우(n또는 m은 생략 가능) (ex. \d{3,5} : 숫자가 3개, 4개, 혹은 5개 있어야함)
\d : 숫자 0~9 (ex. \d\d\d : 0~9 범위 숫자가 3개를 의미(123,000 등)) \D : \d와 반대
\w : 문자를 의미 (ex. \w\w\w : 문자가 3개를 의미(xyz, ABC 등)) \W : \w와 반대
\s : 화이트 스페이스를 의미하는데, [\t\n\r\f] 와 동일 (ex. \s\s : 화이트 스페이스 문자 2개 의미(\r\n, \t\t 등)) \S : \s와 반대
. : 뉴라인(\n)을 제외한 모든 문자를 의미 (ex. .{3} : 문자 3개 (F15, 0x0 등))
\ : 메타문자를 일반문자로 취급하게 해준다. (ex. st = re.sub('[^a-z0-9\-_.]','', st))


*****변수 생성*****
lambda : 쓰고 버리는 일시적인 함수. 함수가 생성된 곳에서만 필요 -> return문이 포함되어 있지 않다. (ex. g = lambda x:x**2  print(g(8)) --> 64)
                          (ex. def inc(n): return lamda x:x+n       )
                          (ex. f = inc(2); g = inc(4)               )
                          (ex. print(f(12))  -->  14                )
                          (ex. print(g(12))  -->  16                )
map(function, literable, ...) : 람다함수의장점으로 두개의 인수를 가진다. 첫번째 매개변수로 함수가 오고 두번째 매개변수로 반복 가능한 자료형(리스트, 튜플 등)이 온다.  
                          (ex. a = [1,2,3,4]   b = [9,8,7,6]                         )
                          (ex. list(map(lamda x, y:x+y, a, b))  --> [10,10,10,10]    )
filter(function, literable) : 두개의 인수를 가진다. function은 처리되는 각각의 요소에 대해 Boolean 값을 반환한다. True를 반환하면 그 요소는 남게되고, Flase라면 요소를 제거한다.
                          (ex. a = [2,18,9,22,17,24,8,12,27]                            )
                          (ex. list(filter(lambda x:x %3 == 0, foo)) --> [18,9,24,12,27])


*****버튼 생성*****(from tkinter import *)
root = Tk()
root.title("title") : title 설정
root.geometry("640x480") : 루트의크기 결정
btn1 = Button(root, padx = 10, pady =  10, text = "버튼1") : root에 버튼1 만들기 크기는 padx, pady를 사용하면 text의 크기에 맞게 늘어나고 10만큼의 여백이 생긴다
btn2 = Button(root, width = 10, height = 10, text = "버튼2") : text의 크기와 상관없이 정해진 크기로 나온다. 
btn1.pack() : 이걸 해주어야마나 실제 루트에서 버튼이 포함되는  것이다. 
